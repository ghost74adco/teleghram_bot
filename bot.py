"""
Script de diagnostic pour identifier le probl√®me du bot Telegram
"""
import os
import sys
import requests
from dotenv import load_dotenv

print("=" * 60)
print("üîç DIAGNOSTIC DU BOT TELEGRAM")
print("=" * 60)

# 1. V√©rification du fichier .env
print("\n1Ô∏è‚É£ V√©rification du fichier .env...")
if os.path.exists('.env'):
    print("   ‚úÖ Fichier .env trouv√©")
    load_dotenv()
else:
    print("   ‚ùå Fichier .env NON TROUV√â")
    print("   Cr√©ez un fichier .env avec:")
    print("   TELEGRAM_BOT_TOKEN=votre_token")
    print("   ADMIN_ID=votre_id")
    sys.exit(1)

# 2. V√©rification du TOKEN
print("\n2Ô∏è‚É£ V√©rification du TOKEN...")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN")
if TOKEN:
    print(f"   ‚úÖ TOKEN trouv√©: {TOKEN[:20]}...")
else:
    print("   ‚ùå TOKEN NON TROUV√â dans .env")
    sys.exit(1)

# 3. Test de connexion √† l'API Telegram
print("\n3Ô∏è‚É£ Test de connexion √† l'API Telegram...")
try:
    response = requests.get(f"https://api.telegram.org/bot{TOKEN}/getMe", timeout=10)
    if response.status_code == 200:
        data = response.json()
        if data.get('ok'):
            bot_info = data.get('result', {})
            print(f"   ‚úÖ Bot connect√©: @{bot_info.get('username')}")
            print(f"   ‚úÖ Nom: {bot_info.get('first_name')}")
            print(f"   ‚úÖ ID: {bot_info.get('id')}")
        else:
            print(f"   ‚ùå R√©ponse API: {data}")
            sys.exit(1)
    else:
        print(f"   ‚ùå Erreur HTTP {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        sys.exit(1)
except Exception as e:
    print(f"   ‚ùå Erreur de connexion: {e}")
    sys.exit(1)

# 4. V√©rification de l'ADMIN_ID
print("\n4Ô∏è‚É£ V√©rification de l'ADMIN_ID...")
ADMIN_ID = os.getenv("ADMIN_ID") or os.getenv("ADMIN_USER_IDS") or os.getenv("TELEGRAM_ADMIN_ID")
if ADMIN_ID and ADMIN_ID.isdigit():
    print(f"   ‚úÖ ADMIN_ID trouv√©: {ADMIN_ID}")
else:
    print(f"   ‚ö†Ô∏è  ADMIN_ID invalide: {ADMIN_ID}")

# 5. V√©rification de python-telegram-bot
print("\n5Ô∏è‚É£ V√©rification de python-telegram-bot...")
try:
    import telegram
    print(f"   ‚úÖ Version install√©e: {telegram.__version__}")
    if telegram.__version__.startswith('20'):
        print("   ‚úÖ Version compatible (20.x)")
    else:
        print(f"   ‚ö†Ô∏è  Version ancienne d√©tect√©e")
        print("   Ex√©cutez: pip install python-telegram-bot --upgrade")
except ImportError:
    print("   ‚ùå Module non install√©")
    print("   Ex√©cutez: pip install python-telegram-bot")
    sys.exit(1)

# 6. Test des webhooks actifs
print("\n6Ô∏è‚É£ V√©rification des webhooks...")
try:
    response = requests.get(f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo", timeout=10)
    if response.status_code == 200:
        webhook_info = response.json().get('result', {})
        webhook_url = webhook_info.get('url', '')
        if webhook_url:
            print(f"   ‚ö†Ô∏è  WEBHOOK ACTIF D√âTECT√â: {webhook_url}")
            print("   ‚ùó Ceci emp√™che le polling de fonctionner!")
            print("\n   üîß SOLUTION: Supprimez le webhook avec:")
            print(f"   curl -X POST https://api.telegram.org/bot{TOKEN}/deleteWebhook")
            
            # Proposition de suppression automatique
            print("\n   Voulez-vous que je le supprime maintenant? (o/n)")
            choice = input("   > ").lower()
            if choice == 'o':
                del_response = requests.post(f"https://api.telegram.org/bot{TOKEN}/deleteWebhook")
                if del_response.json().get('ok'):
                    print("   ‚úÖ Webhook supprim√© avec succ√®s!")
                else:
                    print("   ‚ùå Erreur lors de la suppression")
        else:
            print("   ‚úÖ Pas de webhook actif")
    else:
        print(f"   ‚ö†Ô∏è  Impossible de v√©rifier les webhooks")
except Exception as e:
    print(f"   ‚ö†Ô∏è  Erreur: {e}")

# 7. Test de polling minimal
print("\n7Ô∏è‚É£ Test de polling minimal...")
print("   Lancement d'un bot de test pendant 10 secondes...")
print("   Envoyez /start √† votre bot maintenant!")

try:
    from telegram import Update
    from telegram.ext import Application, CommandHandler, ContextTypes
    
    async def test_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("‚úÖ LE BOT FONCTIONNE!")
        print(f"   ‚úÖ /start re√ßu de {update.effective_user.first_name}")
    
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", test_start))
    
    print("   üü¢ Bot de test en √©coute...")
    print("   üì± Envoyez /start √† votre bot dans Telegram")
    
    import asyncio
    async def run_test():
        async with app:
            await app.start()
            await app.updater.start_polling(drop_pending_updates=True)
            await asyncio.sleep(10)
            await app.updater.stop()
            await app.stop()
    
    asyncio.run(run_test())
    print("\n   Test termin√©.")
    
except Exception as e:
    print(f"   ‚ùå Erreur lors du test: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 60)
print("üèÅ DIAGNOSTIC TERMIN√â")
print("=" * 60)
print("\nSi le test ci-dessus a fonctionn√©, votre bot est OK!")
print("Sinon, partagez les erreurs ci-dessus pour plus d'aide.")
